module.exports=function(e){function t(t){return e.log.write("% "+t+"\n"),s(t).then(function(t){e.log.write(t.stderr+t.stdout)},function(r){throw e.log.write(r.stderr+"\n"),"Failed to run '"+t+"'"})}function r(t,r){var n=t.async();r.then(function(){n()},function(t){e.log.write(t+"\n"),n(!1)})}function n(){return s("git symbolic-ref HEAD").then(function(e){if("refs/heads/master"!==e.stdout.trim())throw"Not on master branch, aborting";return s("git status --porcelain")}).then(function(e){if(""!==e.stdout.trim())throw"Working copy is dirty, aborting"})}require("load-grunt-tasks")(e);var i=require("./files").files;require("systemjs");e.initConfig({builddir:"build",pkg:e.file.readJSON("package.json"),buildtag:"-dev-"+e.template.today("yyyy-mm-dd"),meta:{banner:"/**\n * <%= pkg.description %>\n * @version v<%= pkg.version %><%= buildtag %>\n * @link <%= pkg.homepage %>\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */"},clean:["<%= builddir %>"],ts:{es5:{src:i.src,outDir:"<%= builddir %>/es5",options:{module:"commonjs"}},es6:{src:i.src,outDir:"<%= builddir %>/es6",options:{target:"es6"}}},uglify:{options:{banner:"<%= meta.banner %>\n",mangle:!0},build:{files:{"<%= builddir %>/<%= pkg.name %>.min.js":["<banner:meta.banner>","<%= builddir %>/<%= pkg.name %>.js"],"<%= builddir %>/ng1/stateEvents.min.js":["<banner:meta.banner>","<%= builddir %>/ng1/stateEvents.js"]}}},webpack:{build:{entry:i.commonJsEntrypoint,output:{path:"<%= builddir %>",filename:"<%= pkg.name %>.js",library:"ui.router",libraryTarget:"umd"},module:{loaders:[]},externals:[{angular:{root:"angular",commonjs2:"angular",commonjs:"angular"}}]}},release:{files:["<%= pkg.name %>.js","<%= pkg.name %>.min.js"],src:"<%= builddir %>",dest:"release"},watch:{files:["src/**/*.ts","src/**/*.js","test/**/*.js"],tasks:["ts:es5","webpack","karma:ng14"]},connect:{server:{},sample:{options:{port:5555,keepalive:!0}}},karma:{options:{configFile:"config/karma.js",browsers:[e.option("browser")||"PhantomJS"]},unit:{},debug:{singleRun:!1,background:!1,autoWatch:!0,autoWatchInterval:1,browsers:[e.option("browser")||"Chrome"]},ng12:{options:{files:i.karmaServedFiles("1.2.28")}},ng13:{options:{files:i.karmaServedFiles("1.3.16")}},ng14:{options:{files:i.karmaServedFiles("1.4.1")}},background:{background:!0},watch:{singleRun:!1,autoWatch:!0,autoWatchInterval:1}},changelog:{options:{dest:"CHANGELOG.md"}},ngdocs:{options:{dest:"site",html5Mode:!1,title:"UI Router",startPage:"/api/ui.router",navTemplate:"ngdoc_assets/docnav.html"},api:{src:["src/**/*.js"],title:"API Reference"}}}),e.registerTask("integrate",["clean","build","karma:ng12","karma:ng13","karma:ng14"]),e.registerTask("default",["build","karma:unit","docs"]),e.registerTask("build","Perform a normal build",["clean","ts","webpack","bundles","uglify"]),e.registerTask("dist-docs","Perform a clean build and generate documentation",["build","ngdocs"]),e.registerTask("release","Tag and perform a release",["prepare-release","build","perform-release"]),e.registerTask("dev","Run dev server and watch for changes",["build","connect:server","karma:background","watch"]),e.registerTask("sample","Run connect server with keepalive:true for sample app development",["connect:sample"]),e.registerTask("docs","Generate documentation to _doc",function(){r(this,t('./node_modules/typedoc/bin/typedoc --readme ./README.md --name "UI-Router" --theme ./typedoctheme --mode modules --module commonjs --target es5 --out _doc  src/params src/path src/resolve src/state src/transition src/url src/view src/ng1'))}),e.registerTask("bundles","Create the bundles and reorganize any additional dist files (addons, etc)",function(){var t=e.config("builddir");e.task.requires(["clean","ts"]),e.task.run(["webpack"]),["stateEvents.js","stateEvents.js.map"].forEach(function(r){e.file.copy(t+"/es5/ng1/"+r,t+"/ng1/"+r)})}),e.registerTask("publish-pages","Publish a clean build, docs, and sample to github.io",function(){r(this,n().then(function(){return a.rm("-rf","build"),t("git checkout gh-pages")}).then(function(){return t("git rebase master")}).then(function(){return t("git pull")}).then(function(){return t("grunt dist-docs")}).then(function(){return t("git commit -a -m 'Automatic gh-pages build'")}).then(function(){return t("git checkout master")}))}),e.registerTask("push-pages","Push published pages",function(){r(this,n().then(function(){return a.rm("-rf","build"),t("git checkout gh-pages")}).then(function(){return t("git push origin gh-pages")}).then(function(){return t("git checkout master")}))}),e.registerTask("prepare-release",function(){var t=e.file.readJSON("bower.json"),i=e.file.readJSON("component.json"),a=t.version;if(a!=e.config("pkg.version"))throw"Version mismatch in bower.json";if(a!=i.version)throw"Version mismatch in component.json";r(this,n().then(function(){return s("git tag -l '"+a+"'")}).then(function(t){if(""!==t.stdout.trim())throw"Tag '"+a+"' already exists";e.config("buildtag",""),e.config("builddir","release")}))}),e.registerTask("perform-release",function(){var n=e.config("pkg.version"),i=e.config("builddir");e.task.requires(["prepare-release","build"]),e.file["delete"](i+"/es5"),e.file["delete"](i+"/es6"),r(this,t("git add '"+i+"'").then(function(){return t("git commit -m 'release "+n+"'")}).then(function(){return t("git tag '"+n+"'")}))});var s=require("faithful-exec"),a=require("shelljs")};